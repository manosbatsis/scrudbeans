// -------------------- DO NOT EDIT -------------------
//  This file is automatically generated by scrudbeans,
//  see https://manosbatsis.github.io/scrudbeans
//  To edit this file, copy it to the appropriate package 
//  in your src/main/kotlin folder and edit there. 
// ----------------------------------------------------
package mykotlinpackage.model

import com.github.manosbatsis.kotlin.utils.api.Dto
import com.github.manosbatsis.scrudbeans.api.domain.PersistenceHintsDto
import kotlin.Boolean
import kotlin.String

/**
 * A [Customer]-specific [Dto] implementation
 */
public data class CustomerDto(
  public var name: String? = null,
  public var phoneNumber: String? = null,
  public var address: String? = null,
) : Dto<Customer>, PersistenceHintsDto {
  /**
   * Alternative constructor, used to map 
   * from the given [Customer] instance.
   */
  public constructor(original: Customer) : this(
        name = original.name,
        phoneNumber = original.phoneNumber,
        address = original.address
  )

  public override fun isDetachedUpdate(): Boolean = false

  /**
   * Create a patched copy of the given [Customer] instance,
   * updated using this DTO's non-null properties.
   */
  public override fun toPatched(original: Customer): Customer {
    val patched = original
    errNonUpdatableOrOriginalValue("name", this.name, original.name)
    errNonUpdatableOrOriginalValue("phoneNumber", this.phoneNumber, original.phoneNumber)
    if(this.address != null) patched.address = this.address!!
    return patched
  }

  /**
   * Create an instance of [Customer], using this DTO's properties.
   * May throw a [DtoInsufficientStateMappingException] 
   * if there is mot enough information to do so.
   */
  public override fun toTargetType(): Customer {
    val instance = Customer(
      name = this.name,
      phoneNumber = this.phoneNumber,
      address = this.address
    )
    return instance
  }

  public companion object {
    /**
     * Create a new instance using the given [Customer] as source.
     */
    public fun from(original: Customer): CustomerDto = CustomerDto(
          name = original.name,
          phoneNumber = original.phoneNumber,
          address = original.address
    )

  }
}

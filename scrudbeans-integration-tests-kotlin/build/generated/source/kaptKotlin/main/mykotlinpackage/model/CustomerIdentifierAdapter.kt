// -------------------- DO NOT EDIT -------------------
//  This file is automatically generated by scrudbeans,
//  see https://manosbatsis.github.io/scrudbeans
//  To edit this file, copy it to the appropriate package 
//  in your src/main/kotlin folder and edit there. 
// ----------------------------------------------------
package mykotlinpackage.model

import com.github.manosbatsis.scrudbeans.api.`annotation`.IdentifierAdapterBean
import com.github.manosbatsis.scrudbeans.api.exception.NotFoundException
import com.github.manosbatsis.scrudbeans.api.mdd.model.IdentifierAdapter
import java.lang.Class
import java.lang.IllegalArgumentException
import java.lang.StringBuilder
import kotlin.Any
import kotlin.Boolean
import kotlin.String
import org.springframework.context.`annotation`.Lazy
import org.springframework.core.convert.ConversionService
import org.springframework.stereotype.Component

@Component
@IdentifierAdapterBean(className = "mykotlinpackage.model.Customer")
public class CustomerIdentifierAdapter(
  @Lazy
  private val conversionService: ConversionService,
) : IdentifierAdapter<Customer, CustomerId> {
  public override val entityType: Class<Customer> = Customer::class.java

  public override val entityIdType: Class<CustomerId> = CustomerId::class.java

  public override val isCompositeId: Boolean = true

  public override fun getId(resource: Any?): CustomerId? {
    if(resource == null) return null
    if(resource !is Customer) throw
        IllegalArgumentException("""Incompatible type ${resource::class.java.canonicalName} should be Customer""")
    val noNullMsg =
        "Property find entity for string representation of mykotlinpackage.model.CustomerId or one of it' components"
    return CustomerId(
      name = resource.name
        ?: throw IllegalArgumentException(incompleteIdMsg),
      phoneNumber = resource.phoneNumber
        ?: throw IllegalArgumentException(incompleteIdMsg)
    )
  }

  public override fun getIdAsString(resource: Any?): String? = convertIdToString(getId(resource))

  public override fun buildIdFromString(from: String?): CustomerId? {
    if(from == null) return null
    val notfoundMsg =
        "Cannot find entity for string representation of mykotlinpackage.model.CustomerId or one of it' components"
    val idComponents = from.split("_")
    if(idComponents.size != 2) throw
        IllegalArgumentException("String representation of mykotlinpackage.model.CustomerId must have 2 non-blank components")
    // compositeIdFieldNames: name,phoneNumber
    return CustomerId(
      name = conversionService.convert(idComponents[0], String::class.java)
        ?: throw NotFoundException(notfoundMsg),
      phoneNumber = conversionService.convert(idComponents[1], String::class.java)
        ?: throw NotFoundException(notfoundMsg)
    )
  }

  public override fun convertIdToString(resourceId: CustomerId?): String? {
    if(resourceId == null) return null
    return StringBuilder()
      .append(conversionService.convert(resourceId.name
        ?: throw IllegalArgumentException(incompleteIdMsg), String::class.java))
      .append("_")
      .append(conversionService.convert(resourceId.phoneNumber
        ?: throw IllegalArgumentException(incompleteIdMsg), String::class.java))
      .toString()
  }

  public companion object {
    public val incompleteIdMsg: String =
        "Cannot build string representation from incomplete mykotlinpackage.model.CustomerId"
  }
}

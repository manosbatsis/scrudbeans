// -------------------- DO NOT EDIT -------------------
//  This file is automatically generated by scrudbeans,
//  see https://manosbatsis.github.io/scrudbeans
//  To edit this file, copy it to the appropriate package 
//  in your src/main/kotlin folder and edit there. 
// ----------------------------------------------------
package mykotlinpackage.model

import com.github.manosbatsis.kotlin.utils.api.Dto
import com.github.manosbatsis.scrudbeans.api.domain.PersistenceHintsDto
import io.swagger.v3.oas.annotations.media.Schema
import kotlin.Boolean
import kotlin.Int
import kotlin.Long
import kotlin.String

/**
 * A [DiscountCode]-specific [Dto] implementation
 */
@Schema(
  name = "DiscountCode",
  description = "A model representing an discount code",
)
public data class DiscountCodeDto(
  public var id: Long? = null,
  @field:Schema(
    title = "The discount code",
    required = true,
  )
  public var code: String? = null,
  @field:Schema(
    title = "The discount percentage",
    required = true,
  )
  public var percentage: Int? = null,
) : Dto<DiscountCode>, PersistenceHintsDto {
  /**
   * Alternative constructor, used to map 
   * from the given [DiscountCode] instance.
   */
  public constructor(original: DiscountCode) : this(
        id = original.id,
        code = original.code,
        percentage = original.percentage
  )

  public override fun isDetachedUpdate(): Boolean = false

  /**
   * Create a patched copy of the given [DiscountCode] instance,
   * updated using this DTO's non-null properties.
   */
  public override fun toPatched(original: DiscountCode): DiscountCode {
    val patched = original
    errNonUpdatableOrOriginalValue("id", this.id, original.id)
    errNonUpdatableOrOriginalValue("code", this.code, original.code)
    if(this.percentage != null) patched.percentage = this.percentage!!
    return patched
  }

  /**
   * Create an instance of [DiscountCode], using this DTO's properties.
   * May throw a [DtoInsufficientStateMappingException] 
   * if there is mot enough information to do so.
   */
  public override fun toTargetType(): DiscountCode {
    val instance = DiscountCode(
      id = this.id ?: errNull("id"),
      code = this.code,
      percentage = this.percentage
    )
    return instance
  }

  public companion object {
    /**
     * Create a new instance using the given [DiscountCode] as source.
     */
    public fun from(original: DiscountCode): DiscountCodeDto = DiscountCodeDto(
          id = original.id,
          code = original.code,
          percentage = original.percentage
    )

  }
}

// -------------------- DO NOT EDIT -------------------
//  This file is automatically generated by scrudbeans,
//  see https://manosbatsis.github.io/scrudbeans
//  To edit this file, copy it to the appropriate package 
//  in your src/main/kotlin folder and edit there. 
// ----------------------------------------------------
package mykotlinpackage.model

import com.github.manosbatsis.kotlin.utils.api.Dto
import com.github.manosbatsis.scrudbeans.api.domain.PersistenceHintsDto
import io.swagger.v3.oas.annotations.media.Schema
import java.time.LocalDateTime
import java.util.UUID
import kotlin.Boolean
import kotlin.Long
import kotlin.String

/**
 * A [Order]-specific [Dto] implementation
 */
@Schema(
  name = "Order",
  description = "A model representing an order of product items",
)
public data class OrderDto(
  public var id: UUID? = null,
  public var version: Long? = null,
  public var created: LocalDateTime? = null,
  public var updated: LocalDateTime? = null,
  @field:Schema(
    title = "The client's email",
    required = true,
  )
  public var email: String? = null,
  @field:Schema(
    title = "Order comment",
    required = false,
  )
  public var comment: String? = null,
) : Dto<Order>, PersistenceHintsDto {
  /**
   * Alternative constructor, used to map 
   * from the given [Order] instance.
   */
  public constructor(original: Order) : this(
        id = original.id,
        version = original.version,
        created = original.created,
        updated = original.updated,
        email = original.email,
        comment = original.comment
  )

  public override fun isDetachedUpdate(): Boolean = false

  /**
   * Create a patched copy of the given [Order] instance,
   * updated using this DTO's non-null properties.
   */
  public override fun toPatched(original: Order): Order {
    val patched = original
    errNonUpdatableOrOriginalValue("id", this.id, original.id)
    if(this.version != null) patched.version = this.version!!
    errNonUpdatableOrOriginalValue("created", this.created, original.created)
    errNonUpdatableOrOriginalValue("updated", this.updated, original.updated)
    if(this.email != null) patched.email = this.email!!
    if(this.comment != null) patched.comment = this.comment!!
    return patched
  }

  /**
   * Create an instance of [Order], using this DTO's properties.
   * May throw a [DtoInsufficientStateMappingException] 
   * if there is mot enough information to do so.
   */
  public override fun toTargetType(): Order {
    val instance = Order(
      id = this.id ?: errNull("id"),
      email = this.email ?: errNull("email"),
      comment = this.comment
    )
    version = this.version
    created = this.created
    updated = this.updated
    return instance
  }

  public companion object {
    /**
     * Create a new instance using the given [Order] as source.
     */
    public fun from(original: Order): OrderDto = OrderDto(
          id = original.id,
          version = original.version,
          created = original.created,
          updated = original.updated,
          email = original.email,
          comment = original.comment
    )

  }
}

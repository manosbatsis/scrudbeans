// -------------------- DO NOT EDIT -------------------
//  This file is automatically generated by scrudbeans,
//  see https://manosbatsis.github.io/scrudbeans
//  To edit this file, copy it to the appropriate package 
//  in your src/main/kotlin folder and edit there. 
// ----------------------------------------------------
package mykotlinpackage.model

import com.github.manosbatsis.kotlin.utils.api.Dto
import com.github.manosbatsis.scrudbeans.api.domain.PersistenceHintsDto
import io.swagger.v3.oas.annotations.media.Schema
import java.math.BigDecimal
import java.time.LocalDateTime
import java.util.UUID
import kotlin.Boolean
import kotlin.Long
import kotlin.String

/**
 * A [Product]-specific [Dto] implementation
 */
@Schema(
  name = "Product",
  description = "A model representing a single product",
)
public data class ProductDto(
  public var id: UUID? = null,
  public var version: Long? = null,
  public var created: LocalDateTime? = null,
  public var updated: LocalDateTime? = null,
  @field:Schema(
    title = "The product name",
    required = true,
  )
  public var name: String? = null,
  @field:Schema(
    title = "The product short description (max 512 chars)",
    required = true,
  )
  public var description: String? = null,
  @field:Schema(
    type = "float",
    description = "The product price",
    required = true,
    example = "3.05",
  )
  public var price: BigDecimal? = null,
) : Dto<Product>, PersistenceHintsDto {
  /**
   * Alternative constructor, used to map 
   * from the given [Product] instance.
   */
  public constructor(original: Product) : this(
        id = original.id,
        version = original.version,
        created = original.created,
        updated = original.updated,
        name = original.name,
        description = original.description,
        price = original.price
  )

  public override fun isDetachedUpdate(): Boolean = false

  /**
   * Create a patched copy of the given [Product] instance,
   * updated using this DTO's non-null properties.
   */
  public override fun toPatched(original: Product): Product {
    val patched = original
    errNonUpdatableOrOriginalValue("id", this.id, original.id)
    if(this.version != null) patched.version = this.version!!
    errNonUpdatableOrOriginalValue("created", this.created, original.created)
    errNonUpdatableOrOriginalValue("updated", this.updated, original.updated)
    if(this.name != null) patched.name = this.name!!
    if(this.description != null) patched.description = this.description!!
    if(this.price != null) patched.price = this.price!!
    return patched
  }

  /**
   * Create an instance of [Product], using this DTO's properties.
   * May throw a [DtoInsufficientStateMappingException] 
   * if there is mot enough information to do so.
   */
  public override fun toTargetType(): Product {
    val instance = Product(
      id = this.id ?: errNull("id"),
      name = this.name,
      description = this.description,
      price = this.price
    )
    version = this.version
    created = this.created
    updated = this.updated
    return instance
  }

  public companion object {
    /**
     * Create a new instance using the given [Product] as source.
     */
    public fun from(original: Product): ProductDto = ProductDto(
          id = original.id,
          version = original.version,
          created = original.created,
          updated = original.updated,
          name = original.name,
          description = original.description,
          price = original.price
    )

  }
}
